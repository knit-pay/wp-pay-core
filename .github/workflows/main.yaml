name: Quality Assurance

on: [ push, pull_request ]

env:
  COMPOSER_NO_INTERACTION: 1
  WP_VERSION: '*'

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        include:
          # WordPress and PHP 7.4: https://make.wordpress.org/core/2019/10/11/wordpress-and-php-7-4/.
          - php: 7.4
            env: WP_VERSION=5.3.* COVERAGE=1 PHPCS=1 PHPSTAN=1 ESLINT=1 SASS_LINT=1
          # WordPress 5.2 (or lower) will trigger PHP 7.4 (or higher) errors.
          # @link https://make.wordpress.org/core/2019/10/11/wordpress-and-php-7-4/.
          - php: 7.3
            env: WP_VERSION=5.2.*
          - php: 7.3
            env: WP_VERSION=5.1.*
          - php: 7.3
            env: WP_VERSION=5.0.*
          - php: 7.3
            env: WP_VERSION=4.9.*
          # WordPress 4.8 (or lower) will trigger PHP 7.2 (or higher) errors.
          # @link https://make.wordpress.org/core/2018/10/15/wordpress-and-php-7-3/
          # @link https://make.wordpress.org/core/handbook/best-practices/coding-standards/php/
          # @link https://make.wordpress.org/core/tag/4-9/?s=7.2
          - php: 7.1
            env: WP_VERSION=4.8.*
          - php: 7.1
            env: WP_VERSION=4.7.*
          - php: 7.4
            env: WP_MULTISITE=1
          - php: 7.4
            env: PHPMD=1
          - php: 7.4
            env: PSALM=1
          - php: 7.3
          - php: 7.2
          - php: 7.1
          - php: 7.0
          - php: 5.6
          - php: nightly
          - php: hhvm

    name: PHP ${{ matrix.php }}
    runs-on: ubuntu-latest
    continue-on-error: true

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: wp_phpunit_tests
        ports:
          - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v2

      - uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: mbstring, bcmath, intl
          ini-values: memory_limit=2048M
          tools: composer, phpcs
          coverage: none

      - run: composer self-update

      - name: Composer validation
        run: composer validate --strict

      - name: Cache Composer and Node packages
        id: test-cache
        uses: actions/cache@v2
        with:
          path: |
            **/node_modules
            **/vendor
          key: ${{ runner.os }}-PHP${{ matrix.php}}-WP${{ env.WP_VERSION }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-PHP${{ matrix.php }}-WP${{ env.WP_VERSION }}-

      - name: Install Composer dependencies
        if: steps.test-cache.outputs.cache-hit != 'true'
        run: composer install --no-progress --no-suggest

      - name: Require WordPress
        run: composer require --dev --update-with-dependencies --no-progress --no-suggest roots/wordpress:$WP_VERSION wp-phpunit/wp-phpunit:$WP_VERSION

      - name: List Composer packages
        run: composer show

      - uses: actions/setup-node@v1
        with:
          node-version: '12'

      - name: Install Grunt CLI
        run: npm install -g grunt-cli

      - name: Install Node packages
        if: steps.test-cache.outputs.cache-hit != 'true'
        run: npm install

      - name: PHPLint
        run: composer run-script phplint

      - name: PHP Code Sniffer
        if: env.PHPCS == '1'
        run: composer run-script phpcs

      - name: PHP Mess Detector
        if: env.PHPMD == '1'
        run: composer run-script phpmd

      - name: PHPUnit test suite
        run: composer run-script phpunit

      - name: PHPStan static code analysis
        if: env.PHPSTAN == '1'
        run: composer bin phpstan install && composer run-script phpstan

      - name: Psalm static code analysis
        if: env.PSALM == '1'
        run: composer bin psalm install && composer run-script psalm

      - name: ESLint
        if: env.ESLINT == '1'
        run: npm run-script eslint

      - name: Sass Lint
        if: env.SASS_LINT == '1'
        run: npm run-script eslint
